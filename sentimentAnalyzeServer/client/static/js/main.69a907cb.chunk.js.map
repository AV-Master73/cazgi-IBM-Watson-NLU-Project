{"version":3,"sources":["EmotionTable.js","App.js","reportWebVitals.js","index.js"],"names":["EmotionTable","className","Object","entries","this","props","emotions","map","mapentry","React","Component","App","state","innercomp","rows","cols","id","mode","sentimentOutput","sentiment","renderTextArea","document","getElementById","value","setState","renderTextBox","sendForSentimentAnalysis","url","fetch","then","response","text","data","output","includes","style","color","fontSize","sendForEmotionAnalysis","json","title","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.69a907cb.chunk.js","sourcesContent":["import React from 'react';\r\nimport './bootstrap.min.css';\r\n\r\nclass EmotionTable extends React.Component {\r\n    render() {\r\n        return ( <\r\n            div >\r\n            <\r\n            table className = \"table table-bordered\" >\r\n            <\r\n            tbody > {\r\n                Object.entries(this.props.emotions).map(function(mapentry) {\r\n                    return ( <\r\n                        tr >\r\n                        <\r\n                        td > { mapentry[0] } < /td> <\r\n                        td > { mapentry[1] } < /td> < /\r\n                        tr >\r\n                    )\r\n                })\r\n            } <\r\n            /tbody> < /\r\n            table > <\r\n            /div>\r\n        );\r\n    }\r\n\r\n}\r\nexport default EmotionTable;","import './bootstrap.min.css';\r\nimport './App.css';\r\nimport EmotionTable from './EmotionTable.js';\r\nimport React from 'react';\r\n\r\nclass App extends React.Component {\r\n        state = {\r\n            innercomp: < textarea rows = \"4\"\r\n            cols = \"50\"\r\n            id = \"textinput\" / > ,\r\n            mode: \"text\",\r\n            sentimentOutput: [],\r\n            sentiment: true\r\n        }\r\n\r\n        componentDidMount() {\r\n            document.title = \"Sentiment Analyzer\"\r\n        }\r\n\r\n        renderTextArea = () => {\r\n            document.getElementById(\"textinput\").value = \"\";\r\n            if (this.state.mode === \"url\") {\r\n                this.setState({\r\n                    innercomp: < textarea rows = \"4\"\r\n                    cols = \"50\"\r\n                    id = \"textinput\" / > ,\r\n                    mode: \"text\",\r\n                    sentimentOutput: [],\r\n                    sentiment: true\r\n                })\r\n            }\r\n        }\r\n\r\n        renderTextBox = () => {\r\n            document.getElementById(\"textinput\").value = \"\";\r\n            if (this.state.mode === \"text\") {\r\n                this.setState({\r\n                    innercomp: < textarea rows = \"1\"\r\n                    cols = \"50\"\r\n                    id = \"textinput\" / > ,\r\n                    mode: \"url\",\r\n                    sentimentOutput: [],\r\n                    sentiment: true\r\n                })\r\n            }\r\n        }\r\n\r\n        sendForSentimentAnalysis = () => {\r\n            this.setState({ sentiment: true });\r\n            let url = \".\";\r\n\r\n            if (this.state.mode === \"url\") {\r\n                url = url + \"/url/sentiment?url=\" + document.getElementById(\"textinput\").value;\r\n            } else {\r\n                url = url + \"/text/sentiment?text=\" + document.getElementById(\"textinput\").value;\r\n            }\r\n            fetch(url).then((response) => {\r\n                response.text().then((data) => {\r\n                    this.setState({ sentimentOutput: data });\r\n                    let output = data;\r\n                    if (data.includes('positive')) {\r\n                        output = < div style = {\r\n                            { color: \"green\", fontSize: 20 }\r\n                        } > { data } < /div>\r\n                    } else if (data.includes('negative')) {\r\n                        output = < div style = {\r\n                            { color: \"red\", fontSize: 20 }\r\n                        } > { data } < /div>\r\n                    } else {\r\n                        output = < div style = {\r\n                            { color: \"orange\", fontSize: 20 }\r\n                        } > { data } < /div>\r\n                    }\r\n                    this.setState({ sentimentOutput: output });\r\n                })\r\n            });\r\n        }\r\n\r\n        sendForEmotionAnalysis = () => {\r\n                this.setState({ sentiment: false });\r\n                let url = \".\";\r\n                if (this.state.mode === \"url\") {\r\n                    url = url + \"/url/emotion?url=\" + document.getElementById(\"textinput\").value;\r\n                } else {\r\n                    url = url + \"/text/emotion/?text=\" + document.getElementById(\"textinput\").value;\r\n                }\r\n                fetch(url).then((response) => {\r\n                        response.json().then((data) => {\r\n                            this.setState({\r\n                                sentimentOutput: < EmotionTable emotions = { data }\r\n                                />});\r\n                            })\r\n                        });\r\n                    }\r\n\r\n\r\n                    render() {\r\n                        return ( <\r\n                            div className = \"App\" >\r\n                            <\r\n                            button className = \"btn btn-info\"\r\n                            onClick = { this.renderTextArea } > Text < /button> <\r\n                            button className = \"btn btn-dark\"\r\n                            onClick = { this.renderTextBox } > URL < /button> <\r\n                            br / > < br / > { this.state.innercomp } <\r\n                            br / >\r\n                            <\r\n                            button className = \"btn-primary\"\r\n                            onClick = { this.sendForSentimentAnalysis } > Analyze Sentiment < /button> <\r\n                            button className = \"btn-primary\"\r\n                            onClick = { this.sendForEmotionAnalysis } > Analyze Emotion < /button> <\r\n                            br / > { this.state.sentimentOutput } <\r\n                            /div>\r\n                        );\r\n                    }\r\n                }\r\n\r\n                export default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}